<!DOCTYPE html>
<html>
<head>
  <title>codeQuest</title>
  <link rel="stylesheet" type="text/css" href="<%=url('lesson.css')%>">
  <link rel="icon" type="image/png" href="/favicon2.png">
</head>
<% if @theme == 'light' %>
  <style>@import url('color-scheme-light.css');</style>
<% else %>
  <style>@import url('color-scheme-dark.css');</style>
<% end %>
<body>
  <header class="container">
    <a href='/home'><h1 class="logo">codeQuest</h1></a>
    <nav class="nav-links">
      <ul>
        <li><a href="/home" class="nav-link">Inicio</a></li>
        <li><a href="/profile" class="nav-link">Perfil</a></li>
        <li><a href="/snippets" class="nav-link">Snippets</a></li>
      </ul>
    </nav>
  </header>
  <% if @lesson.id == 1 %>
  <div class="text-container">
    <h1>Que es Haskell?</h1>
    <p>Haskell es un lenguaje de programación funcional puro, conocido por su evaluación lazy y su enfoque en la expresividad y la concisión del código. Pertenece al paradigma de programación funcional y fue creado por un comité liderado por Simon Peyton Jones en 1990. Haskell se basa en la teoría de categorías y promueve el uso de funciones para la resolución de problemas, evitando efectos secundarios. La evaluación lazy permite retrasar el cálculo hasta que los resultados sean necesarios, lo que puede conducir a una mayor eficiencia en ciertos casos. Haskell fomenta la programación declarativa y ofrece un sistema de tipos fuerte y estático.</p>
  </div>
  <% end %>

  <% if @lesson.id == 2 %>
  <div class="text-container">
    <h1>Tipos de datos en Haskell</h1>
    <p>En Haskell, el tipado es estático y fuerte. Cada expresión tiene un tipo definido en tiempo de compilación y se verifica su coherencia antes de la ejecución. El sistema de tipos de Haskell es poderoso y permite la inferencia automática de tipos. Los tipos ayudan a prevenir errores y garantizan la consistencia del programa. Haskell utiliza una combinación de tipos básicos, tipos algebraicos y tipos polimórficos para expresar estructuras de datos y comportamientos. La precisión y rigurosidad del tipado en Haskell contribuyen a la seguridad y la confiabilidad del código.</p> 
  </div>
  <% end %>

  <% if @lesson.id == 3 %>
  <div class="text-container">
    <h1>Funciones</h1>
    <p>Las funciones en Haskell son ciudadanos de primera clase y pueden ser pasadas como argumentos, devueltas como resultados y almacenadas en estructuras de datos. Haskell fomenta la composición de funciones y el estilo declarativo. Las funciones son puras, lo que significa que no tienen efectos secundarios y producen el mismo resultado para los mismos argumentos. Las funciones de alto orden permiten la abstracción y la reutilización de patrones comunes. La programación funcional en Haskell se basa en la aplicación de funciones y la transformación de datos, lo que promueve un código más conciso y modular.</p> 
  </div>
  <% end %>

  <% if @lesson.id < Lesson.maximum(:id) %>
    <div class="continue-button-container">
      <% next_lesson_id = @lesson.id + 1 %>
      <a href="/lesson/<%= next_lesson_id %>"><button type="button" class="continue-button">Siguiente leccion</button></a>  
    </div>
  <% end %>

</body>
</html>